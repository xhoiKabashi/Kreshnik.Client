@using BlazorDex.Models
@using BlazorDex.Util
@inject HeroClient client
@inject HeroStateService HeroStateService


@if (isLoading)
{
    <h1>Loading Hero stats</h1>
}
else
{

    <div class=" grid grid-cols-2 gap-1 uppercase   w-full ">
        <StatsSectionModular ImageSrc="image/attkMag.png" StatName="Attack" StatValue="@hero.Dmg" Points="@hero.Points"
            ButtonClass="" OnStatChanged="HandleStatChanged" />
        <StatsSectionModular ImageSrc="image/armor.png" StatName="Armor" StatValue="@hero.Armor" Points="@hero.Points"
            ButtonClass="" OnStatChanged="HandleStatChanged" />
        <StatsSectionModular ImageSrc="image/speed.png" StatName="Speed" StatValue="@hero.Speed" Points="@hero.Points"
            ButtonClass="" OnStatChanged="HandleStatChanged" />
        <StatsSectionModular ImageSrc="image/potion.png" StatName="Hp" StatValue="@hero.Hp" Points="@hero.Points"
            ButtonClass="" OnStatChanged="HandleStatChanged" />
    </div>

}

@code {
    private bool isLoading = true;
    private Hero hero;

    protected override async Task OnInitializedAsync()
    {
        HeroStateService.OnChange += StateHasChanged;
        await LoadHeroData();
    }

    private async Task LoadHeroData()
    {
        try
        {
            hero = HeroStateService.Hero;
            if (hero == null)
            {
                hero = await client.GetHero("1");
                HeroStateService.SetHero(hero);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching Hero: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleStatChanged((string StatName, int Change) change)
    {
        if (hero.Points <= 0 && change.Change > 0)
        {
            return; // Prevent changes if no points are available
        }

        switch (change.StatName)
        {
            case "Attack":
                hero.Dmg += change.Change;
                break;
            case "Armor":
                hero.Armor += change.Change;
                break;
            case "Speed":
                hero.Speed += change.Change;
                break;
            case "Hp":
                hero.Hp += 25;
                break;
        }

        if (change.Change > 0)
        {
            hero.Points -= change.Change;
        }

        try
        {
            await client.UpdateHero(hero);
            HeroStateService.SetHero(hero);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating Hero: {ex.Message}");
        }
    }
}